<template>
  <div class="book-shelf-page">
    <div class="web-box">
      <web allowthirdpartycookies="true" id="web" src="{{$app.$def.h5_url}}/member/bookshelf.html" onpagestart="emitEvt"  ontitlereceive="titleEvt"></web>
    </div>    
    <div class="tab-box" if="tabIsShow">
      <block for="{{tabItemList}}">
        <div class="tab-items" onclick="setIndex($idx)">
          <block if="{{$idx==flag}}">
            <image class="tab-img" src="{{dataMap[$item].selectedIcon}}"></image>
            <text class="tab-text" style="color: #0faeff;">{{dataMap[$item].name}}</text>
          </block>
          <block else>
            <image class="tab-img" src="{{dataMap[$item].icon}}"></image>
            <text class="tab-text">{{dataMap[$item].name}}</text>
          </block>
        </div>
      </block>
    </div>
    <div class="create-desktop-icon-dialog" if="created_dialog">      
      <div class="desktop-icon-box">
        <div class="close-circle" onclick="colseDialog"><image src="{{close_url}}"></image></div>
        <div class="phone"><image src="{{phone_url}}"></image></div>
        <div class="creat-desktop-tip"><text class="tip-text">添加成功，下次可直接</text><text class="origin-color">从手机桌面打开【若看小说】</text></div>
        <div class="close-btn" onclick="colseDialog"><text class="iknow">我知道了</text></div>
      </div>
    </div>
    <!-- 创建快捷方式 -->
    <input if="!isCreated && tabIsShow" class="create-shortcut" type="button" onclick="createShortcut" value="保存到手机，方便下次看书" />
  </div>
</template>

<script>
import router from '@system.router'
import { tabsData } from '../Common/data.js'
import shortcut from '@system.shortcut'
import storage from '@system.storage'
import { pageEnter, pageLeave } from "../SDK/TDSDK.min.js"
import comm from '../Common/js/comm.js'

export default {
  data() {
    return {
      pageName: '书架',
      flag: 0,
      tabIsShow: false,
      isCreated: false,
      created_dialog: false,
      tabItemList: [],
      dataMap: tabsData,
      phone_url: require('../common/phone.png'),
      close_url: require('../common/close.png'),
      page_url: '',
      url: ''


    }
  },
  onInit() {
    let _this = this
    let querys = this.$page.query
    comm.setChannelId(querys.fc)
    // router.push({
    //   uri: '/home',
    //   params: {book_id: 18006, chapter_id: 2659936}
    // })
    console.log('dataMap', this.dataMap)
    // 初始化tabItemList
    this.tabItemList = [].concat(Object.keys(this.dataMap))
    shortcut.hasInstalled({
      success: function (ret) {
        if (ret) {
          _this.isCreated = true
        }else{
          _this.isCreated = false
        }
      },
      fail: function (err) {
        console.log('err', err)
      }
    })

    // 判断用户打开应用大于7天将创建快捷键隐藏
    let time = new Date().getTime()
    // storage.clear()
    storage.get({
      key: 'openTime',
      success: function(data) {
        let old_time = data ? JSON.parse(data) : 0
        if(data){
          let days = (time - old_time) / (1000*60*60*24)
          // console.log('days', days)
          if(days > 7){
            _this.isCreated = true
          }          
        }       
      },
      fail: function(data, code) {
        console.log(`handling fail, code = ${code}`)
      }
    })
  },
  onShow() {
    let _this = this
    let query = this.$page.query
    // let src = this.$element('web')._attr.src
    // this.emitEvt({url: src})
    this.emitEvt({url: _this.url})
    pageEnter(_this.pageName);

  },
  onHide() {
    let _this = this
    pageLeave(_this.pageName);
  },
  createShortcut () {
    let _this = this
    // 创建快捷方式
    this.$app.$def.createShortcut((isTrue)=>{
      if (isTrue) {
        _this.isCreated = true
        _this.created_dialog = true
      }else{
        _this.isCreated = false
      }
    })
  },
  colseDialog(){
    this.created_dialog = false
  },
  onBackPress () {
    if(this.page_url.indexOf('/book') != -1 || this.page_url.indexOf('/vip') != -1){
      router.replace({
        uri: 'BookShelf'
      })
    }
    this.$element('web').canBack({
      callback: function (e) {
        if (e) {
          // 加载历史列表中的上一个 URL
          this.$element('web').back()
        } else {
          router.replace({
            uri: 'Home'
          })
        }
      }.bind(this)
    })
    // 阻止默认行为，等待异步操作
    return true
  },
  emitEvt(url, e){
    // this.$dispatch('dispathEvt', {
    //   url: url.url
    // })
    let evt = url.url
    let _this = this
    _this.tabIsShow = false
    _this.url = url.url
    let value = evt.substring(evt.indexOf('.com')+4)
    console.log('a', value)
    this.page_url = value
    if(value.indexOf('/member/bookshelf') != -1 || value == '/' || value.indexOf('/?') != -1  || value == '/all' || value == '/all.html' || value == '/member/my' || value == '/member/my.html' || value == '/member/login' || value == '/member/login.html'){
      _this.tabIsShow = true
    }

    if(value == '/' || value.indexOf('/?') != -1 ){
      _this.flag = 1
    }else if(value.indexOf('/member/bookshelf') != -1){
      _this.flag = 0
    }else if(value.indexOf('/member/my') != -1){
      _this.flag = 3
    }
  },
  titleEvt(e){
    // 设置标题栏
    this.$page.setTitleBar({ text: e.title })
  },
  // 页面跳转
  routePath (path, params) {
    router.push({
      uri: path,
      params: params
    })
  },
  //修改flag实现点击导航栏显示不同的页面，pos为传入的参数
  setIndex: function (pos) {	
    console.log('pos', pos)
    //设置flag，flag改变后显示的页面也会对应的改变	
    this.flag = pos
    if(pos == 0){
      router.replace({
        uri: 'BookShelf'
      })
    }else if(pos == 1){
      router.replace({
        uri: 'Home'
      })
    }else if(pos == 2){
      router.replace({
        uri: 'All'
      })
    }else if(pos == 3){
      router.replace({
        uri: 'User'
      })
    }
  }
  
}
</script>
<style lang="less">
.book-shelf-page{
  width: 100%;
  height: 100%;
  display: flex;
  flex-direction: column;
  background-color: #fff;
  /* padding-bottom: 100px; */
  .web-box{
    flex: 1;
  }
  .tab-box{
    height: 100px;
    display: flex;
    .tab-items{      
      flex: 1;
      flex-direction: column;
      .tab-text {
        text-align: center;
        .checked-color{
          color: #0faeff;
        }
        /* &:active {
          color: #0faeff;
        } */
      }
      .tab-img {
        /* display: block; */
        width: 50px;
        margin: 0 auto;
      }
    }
  }
  .create-shortcut{  
    position: absolute;
    bottom: 120px;
    left: 25px;
    width: 700px;
    /* z-index: inherit; */
    color: #fff;
    border-radius: 50px;
    background-color: #DD4343;
  }
  .create-desktop-icon-dialog{
    position: fixed;
    left: 0;
    top: 0;
    z-index: 1500;
    width: 100%;
    height: 100%;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    background-color: rgba(0, 0, 0, .6);
    
    .desktop-icon-box{
      width: 600px;
      /* height: 800px; */
      /* height: auto; */
      background-color: #fff;
      border-radius: 20px;
      display: flex;
      flex-direction: column;
      align-items: center;
      position: relative;
      .close-circle{
        position: absolute;
        top: 0;
        right: 0;
        image{
          width: 70px;
          height: 70px;
        }
      }
      .phone{
        width: 300px;
        /* height: auto; */
        margin-top: 50px;
        image{
          width: 100%;
          /* height: auto; */
        }
      }
      .creat-desktop-tip{
        display: flex;
        flex-direction: column;
        width: 500px;
        margin: 30px 0;
        .tip-text{
          color: #333;
          font-size: 28px;
          text-align: center;
          line-height: 40px;          
        }  
        .origin-color{
          color: #F46917;
          font-size: 28px;
          text-align: center;
          line-height: 40px;
        }      
      }
      .close-btn{
        width: 500px;
        height: 100px;        
        background-color: #FF5B5F;
        border-radius: 50px;
        margin-bottom: 50px;
        .iknow{
          width: 100%;
          height: 100%;
          color: #fff;
          font-size: 34px;
          text-align: center;
          line-height: 100px;
        }
      }
    }
  }
  
  
}
</style>

